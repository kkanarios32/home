[{"URL": "https://arxiv.org/abs/1909.08053", "abstract": "Recent work in language modeling demonstrates that training large transformer models advances the state of the art in Natural Language Processing applications. However, very large models can be quite difficult to train due to memory constraints. In this work, we present our techniques for training very large transformer models and implement a simple, efficient intra-layer model parallel approach that enables training transformer models with billions of parameters. Our approach does not require a new compiler or library changes, is orthogonal and complimentary to pipeline model parallelism, and can be fully implemented with the insertion of a few communication operations in native PyTorch. We illustrate this approach by converging transformer based models up to 8.3 billion parameters using 512 GPUs. We sustain 15.1 PetaFLOPs across the entire application with 76% scaling efficiency when compared to a strong single GPU baseline that sustains 39 TeraFLOPs, which is 30% of peak FLOPs. To demonstrate that large language models can further advance the state of the art (SOTA), we train an 8.3 billion parameter transformer language model similar to GPT-2 and a 3.9 billion parameter model similar to BERT. We show that careful attention to the placement of layer normalization in BERT-like models is critical to achieving increased performance as the model size grows. Using the GPT-2 model we achieve SOTA results on the WikiText103 (10.8 compared to SOTA perplexity of 15.8) and LAMBADA (66.5% compared to SOTA accuracy of 63.2%) datasets. Our BERT model achieves SOTA results on the RACE dataset (90.9% compared to SOTA accuracy of 89.4%).", "accessed": {"date-parts": [[2024, 9, 18]]}, "author": [{"family": "Shoeybi", "given": "Mohammad"}, {"family": "Patwary", "given": "Mostofa"}, {"family": "Puri", "given": "Raul"}, {"family": "LeGresley", "given": "Patrick"}, {"family": "Casper", "given": "Jared"}, {"family": "Catanzaro", "given": "Bryan"}], "id": "shoeybiMegatronLMTrainingMultiBillion2020", "issued": {"date-parts": [[2020, 3]]}, "keyword": "Computer Science - Computation and Language", "language": "en-US", "number": "arXiv:1909.08053", "publisher": "arXiv", "title": "Megatron-LM: Training Multi-Billion Parameter Language Models Using Model Parallelism", "title-short": "Megatron-LM", "type": "", "original_bibtex": "@misc{shoeybiMegatronLMTrainingMultiBillion2020,\n title = {Megatron-{{LM}}: {{Training Multi-Billion Parameter Language Models Using Model Parallelism}}},\n author = {Shoeybi, Mohammad and Patwary, Mostofa and Puri, Raul and LeGresley, Patrick and Casper, Jared and Catanzaro, Bryan},\n year = {2020},\n urldate = {2024-09-18},\n number = {arXiv:1909.08053},\n publisher = {arXiv},\n file = {/home/kellen/Zotero/storage/JMJ9WPZ9/Shoeybi et al. - 2020 - Megatron-LM Training Multi-Billion Parameter Language Models Using Model Parallelism.pdf},\n keywords = {Computer Science - Computation and Language},\n langid = {english},\n archiveprefix = {arXiv},\n abstract = {Recent work in language modeling demonstrates that training large transformer models advances the state of the art in Natural Language Processing applications. However, very large models can be quite difficult to train due to memory constraints. In this work, we present our techniques for training very large transformer models and implement a simple, efficient intra-layer model parallel approach that enables training transformer models with billions of parameters. Our approach does not require a new compiler or library changes, is orthogonal and complimentary to pipeline model parallelism, and can be fully implemented with the insertion of a few communication operations in native PyTorch. We illustrate this approach by converging transformer based models up to 8.3 billion parameters using 512 GPUs. We sustain 15.1 PetaFLOPs across the entire application with 76\\% scaling efficiency when compared to a strong single GPU baseline that sustains 39 TeraFLOPs, which is 30\\% of peak FLOPs. To demonstrate that large language models can further advance the state of the art (SOTA), we train an 8.3 billion parameter transformer language model similar to GPT-2 and a 3.9 billion parameter model similar to BERT. We show that careful attention to the placement of layer normalization in BERT-like models is critical to achieving increased performance as the model size grows. Using the GPT-2 model we achieve SOTA results on the WikiText103 (10.8 compared to SOTA perplexity of 15.8) and LAMBADA (66.5\\% compared to SOTA accuracy of 63.2\\%) datasets. Our BERT model achieves SOTA results on the RACE dataset (90.9\\% compared to SOTA accuracy of 89.4\\%).},\n primaryclass = {cs},\n eprint = {1909.08053},\n month = {March},\n shorttitle = {Megatron-{{LM}}}\n}\n"}]